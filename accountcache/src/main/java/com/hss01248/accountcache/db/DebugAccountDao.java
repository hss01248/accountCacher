package com.hss01248.accountcache.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hss01248.accountcache.DebugAccount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEBUG_ACCOUNT".
*/
public class DebugAccountDao extends AbstractDao<DebugAccount, Long> {

    public static final String TABLENAME = "DEBUG_ACCOUNT";

    /**
     * Properties of entity DebugAccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UpdateTime = new Property(1, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property CountryCode = new Property(2, String.class, "countryCode", false, "COUNTRY_CODE");
        public final static Property Account = new Property(3, String.class, "account", false, "ACCOUNT");
        public final static Property Pw = new Property(4, String.class, "pw", false, "PW");
        public final static Property HostType = new Property(5, int.class, "hostType", false, "HOST_TYPE");
        public final static Property UsedNum = new Property(6, int.class, "usedNum", false, "USED_NUM");
        public final static Property Position = new Property(7, int.class, "position", false, "POSITION");
    }


    public DebugAccountDao(DaoConfig config) {
        super(config);
    }
    
    public DebugAccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEBUG_ACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 1: updateTime
                "\"COUNTRY_CODE\" TEXT," + // 2: countryCode
                "\"ACCOUNT\" TEXT," + // 3: account
                "\"PW\" TEXT," + // 4: pw
                "\"HOST_TYPE\" INTEGER NOT NULL ," + // 5: hostType
                "\"USED_NUM\" INTEGER NOT NULL ," + // 6: usedNum
                "\"POSITION\" INTEGER NOT NULL );"); // 7: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEBUG_ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DebugAccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUpdateTime());
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(3, countryCode);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(4, account);
        }
 
        String pw = entity.getPw();
        if (pw != null) {
            stmt.bindString(5, pw);
        }
        stmt.bindLong(6, entity.getHostType());
        stmt.bindLong(7, entity.getUsedNum());
        stmt.bindLong(8, entity.getPosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DebugAccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUpdateTime());
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(3, countryCode);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(4, account);
        }
 
        String pw = entity.getPw();
        if (pw != null) {
            stmt.bindString(5, pw);
        }
        stmt.bindLong(6, entity.getHostType());
        stmt.bindLong(7, entity.getUsedNum());
        stmt.bindLong(8, entity.getPosition());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DebugAccount readEntity(Cursor cursor, int offset) {
        DebugAccount entity = new DebugAccount( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // updateTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // countryCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // account
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pw
            cursor.getInt(offset + 5), // hostType
            cursor.getInt(offset + 6), // usedNum
            cursor.getInt(offset + 7) // position
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DebugAccount entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUpdateTime(cursor.getLong(offset + 1));
        entity.setCountryCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPw(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHostType(cursor.getInt(offset + 5));
        entity.setUsedNum(cursor.getInt(offset + 6));
        entity.setPosition(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DebugAccount entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DebugAccount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DebugAccount entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
